#!/bin/sh

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# If not in bash, don't do anything below
[ -z "$BASH_VERSION" ] && return

# ==== bash control ==== {{{

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace:erasedup

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# Ignore some controlling instructions
export HISTIGNORE='[ 	]*:&:bg:fg:exit'

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar 2>/dev/null

# Don't wait for job termination notification
set -o notify

# Don't use ^D to exit
set -o ignoreeof

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm*) color_prompt=yes;;
    linux) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
# force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

if [ -n "$HOST_IP" ]; then
    HOST="\$HOST_IP"
else
    HOST="\\h"
fi

if [ "$color_prompt" = yes ]; then
    if [ -z "$PS_COLOR_HOST" ]; then
        PS_COLOR_HOST="01;32m"
    fi
    if [ -z "$PS_COLOR_DIR" ]; then
        PS_COLOR_DIR="01;34m"
    fi
    PS1='\[\033['"$PS_COLOR_HOST"'\]\u@'"$HOST"'\[\033[00m\]:\[\033['"$PS_COLOR_DIR"'\]\w\[\033[00m\]\$ '
else
    PS1='\u@'"$HOST"':\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
    xterm*|rxvt*|linux*)
        PS1="\[\e]0;\u@$HOST: \w\a\]$PS1"
        ;;
    *)
        ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls -Fh --color=auto'
    alias dir='dir -Fh --color=auto'
    alias vdir='vdir -Fh --color=auto'

    export GREP_OPTIONS='--color=auto'
else
    alias ls='ls -F'
fi

# }}}

# ==== command control ==== {{{

# some more ls aliases
alias ll='ls -l'
alias la='ls -A'
alias l='ll'

# Interactive operation...
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# Default to human readable figures
if [ `uname` = 'Linux' ]; then
    alias df='df -h'
    alias du='du -h'
fi

# Misc :)
alias less='less -r'                          # raw control characters

alias ..='cd ..'
alias ...='cd ../..'
alias cd..='cd ..'

alias h='history | tail -100'
alias hist='history'
alias c='clear'
alias cls='clear'
alias so='source'

alias tree='tree -F'

alias diff='colordiff'

# make less more friendly for non-text input files, see lesspipe(1)
[ -f /usr/bin/lesspipe.sh ] && export LESSOPEN="| /usr/bin/lesspipe.sh %s"
[ -f /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# }}}

# ==== other setting ==== {{{

# tty option
#stty erase ^H

# umask
umask 0027

# environment
if vim --version >/dev/null 2>&1; then
    export EDITOR="vim"
fi

# core
#ulimit -S -c unlimited > /dev/null 2>&1

# dmalloc
#if dmalloc >/dev/null 2>&1; then
#	function dmalloc { eval `command dmalloc -b "$@"`; }
#fi

# }}}

# vim: filetype=sh
